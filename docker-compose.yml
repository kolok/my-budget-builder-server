# Docker compose version
version: "2"
services:

# Server docker
  server:
    container_name: loop-server
# server sources are locatted into ./server, we need to set the root ./server for the Docker builder
    build:
      context: .
      dockerfile: Dockerfile
      #restart: always
# Open port 3000
# FIXME: this should be replaced by nginx-proxy
    ports:
      - "3000:3000" # container port: server port
    environment:
      NODE_ENV: development
# Mount root to taken into account code updates
# ignore /usr/server/node_modules
    volumes:
      - .:/usr/server
      - /usr/server/node_modules
# Waiting for database
    depends_on:
      - db
# Run nodemon using "npm run watch"
    command: ["npm", "run", "watch"]

# Here is the postgreSQL engine exposed on 5431
  db:
    image: postgres
    restart: always
# opened port 5432 to be able to connect to the db using a postgresql client direct in a shell
# Ex: psql -p 5432 -h 127.0.0.1 -U myuser
# Else, if the port is not opened you can use the "docker exec" command
#    ports:
#      - 5432:5432
    environment:
# Use a dedicate user for this pproject with a complex password
      POSTGRES_USER: loop-admin
      POSTGRES_PASSWORD: Aek8Aegaloh1jaD0Rah6ieghOosh9ree
# PGDATA is the volume where the postgresql data file will be stored
      PGDATA: /var/lib/postgresql/data/loopdata
# mount posgresql volume on your own computer to persist the data
    volumes:
        - /var/lib/postgresql/data/loopdata:/var/lib/postgresql/data/loopdata:rw
    container_name: loop-db

# This is an interface to admininstrate db in your docker envirnment on port 8080
# To access it, open a browser on the url http://localhost:8080
# This is only t help developers but will not be used in MyITS project
  adminer:
    image: adminer
    restart: always
    ports:
      - 8081:8080
    container_name: loop-adminer
